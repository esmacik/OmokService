     CS 3360 - Design and Implementation of Programming Languages
	       
		  PROJECT 1: WEB SCRIPTING WITH PHP
		 (File $Date: 2020/02/24 19:43:50 $)

Due: March 5, 2020

This assignment may be done individually or in pairs. Research has
shown that students learn better when they do homework assignments in
pairs. However, it does not necessarily mean a decrease in the time
you will spend on your assignments. If you work in pair, you need to
fill out the contribution form (see the course website).

The purpose of this assignment is to understand the concepts of web
scripting languages and have a hands-on experience with web scripting
by writing small web service code in PHP [1].

You are to write a lightweight web service in PHP for playing omok
games. Omok (a.k.a. Gomoku and Gobang), meaning "five pieces", is a
two-player strategy game typically played with go pieces, black and
white stones, on a go board with 15x15 intersections (or places)
[Wikipedia]. It can also be played with a paper and pencils because
stones, once placed, are not allowed to be moved or removed from the
board. The two players alternate in placing a stone of their color on
an empty intersection, and the goal of the game is to place one's
stones in a row of five consecutive intersections vertically,
horizontally, or diagonally. The winner is the first player to get an
unbroken row of five stones.

As a web service, your PHP code provides only a few APIs implementing
the logic, data or process for playing omok games, not a complete Web
application; no GUI needs to be provided by your code. The web service
APIs are predefined and specified as URLs (see below). Below are key
requirements for your web service.

R1: The web service shall work with a provided Java client available
    and downloadable from the course website (omokClient.jar).

R2: The web service shall support multiple clients possibly at the same
    time, each client playing against the server (see R5 below). 

R3: A game board shall consist of 15*15 intersections (or places) on
    which black/white stones can be placed.

R4: An individual place of a board shall be identified by a pair (x,y)
    of 0-based column/row indices, e.g., (0,2) for the intersection
    at the first column and the third row.

R5: The web service shall provide at least two different move
    strategies for the computer, e.g., random and smart. The smart
    strategy shall be indeed "smart" to allow for a realistic
    play. Minimally, it should detect a winning/loosing row, i.e., a
    sequence of three stones with both ends open and four stones with
    at least one end open. Hint: Use the Strategy design patterns to
    support different computer move strategies [Chapter 5 of 2].

R6: The web service shall determine the outcome: win, loss, or draw.

The web service APIs are implemented as a set of URLs as specified
below. All communications between the web service and a client shall
be done using the HTTP query string and the JavaScript Object Notation
(JSON), a lightweight data-interchange format (see www.json.org)
[3]. All inputs to the web service shall be obtained from HTTP query
strings, and all outputs to the client shall be written in
JSON. Following the REST principles, the web service shall be
stateless and provide the following three URLs:

1. http://<omok-home>/info (short for .../info/ or .../info/index.php),
   where <omok-home> is the address of your omok service typically
   consisting of a host name and a pathname.
   Provide game information, including the board size and available
   computer move strategies. Below is a sample JSON output.

   {"size": 15, "strategies": ["Smart", "Random"]}

   Hint: Use json_encode() function to create a JSON (string)
   representation of a PHP value or object.

2. http://<omok-home>/new?strategy=s
   Create a new game to play against the specified computer strategy.
   A normal response will be a JSON string like:

     {"response": true, "pid": "55ed3eb95f5a3"}
     
   where pid is a unique play identifier generated by the web service. 
   It will be used to play the newly created game (see 3 below).

   Upon an error, it shall be notified to the client by providing an
   an appropriate error response like:

     {"response": false, "reason": "Strategy not specified"}
     {"response": false, "reason": "Unknown strategy"}

   Hint: Use uniqid() function to generate a unique identifier based
   on the current time in microseconds. Use the Strategy design pattern
   to define different strategy classes, e.g., RandomStrategy and
   SmartStrategy [Chapter 5 of 2].

3. http://<omok-home>/play?pid=p&move=x,y
   Make a move by placing a stone on the specified place (x,y) to play
   the specified game (p). Example: .../play/?pid=57cdc4815e1e5&move=4,5.

   A normal response will be a JSON string like:
     
     {"response": true,
      "ack_move": {
        "x": 4, 
        "y": 5, 
        "isWin": false,   // winning move?
	"isDraw": false,  // draw?
	"row": []},       // winning row if isWin is true
      "move": {
        "x": 4, 
        "y": 6, 
        "isWin": false, 
        "isDraw": false, 
        "row": []}}

   where "ack_move" is the acknowledgement and the outcome of the
   requested move of the player, and "move" is the computer move made
   right after the player's; there will be no computer move if the
   player move is a game-ending (win or draw) move. For a winning
   move, the value of "row" is an array of numbers denoting the
   indices of the winning row [x1,y1,x2,y2,...,xn,yn], where x's and
   y's are 0-based column and row indices of places, e.g.,

     "row":[6,7,7,7,8,7,9,7,10,7]

   If there is an error, it should be reported to the client by
   providing an appropriate error message like:

     {"response": false, "reason": "Pid not specified"}
     {"response": false, "reason": "Unknown pid"}
     {"response": false, "reason": "Move not specified"}
     {"response": false, "reason": "Move not well-formed"}
     {"response": false, "reason": "Invalid x coordinate, 20"}
     {"response": false, "reason": "Invalid y coordinate, 30"}

   Hint: Define several classes to model the omok game, say, Play,
   Board, etc. The states of some of these classes need to be stored
   externally, e.g., a file, because the web service sessions are
   stateless and the game state should be preserved between sessions.
   You may use JSON to encode and persist game states.

   Hint: You may use the player identifier (pid) as a file name to
   store the game state, and the game state may be stored as or
   restored from a JSON string; use json_encode() and json_decode()
   functions.

   Hint: Use json_decode() function to convert a JSON encoded string
   to a PHP value or object.

With above three web service URLs, an omok game can be played as
follows:

Step 1: visit http://<omok-home>/info to find game info
Step 2: visit http://<omok-home>/new?strategy=s to create a new game
Step 3: repeatedly visit http://<omok-home>/play?pid=p&move=x,y 
        to place a stone, e.g. in pseudo code:

        while (true) {
           visit http://<omok-home>/play?pid=p&move=x,y 
           if (ack_move.isWin) {
               break; // player won
           } else if (ack_move.isDraw) {
               break; // draw
           } else if (move.isWin) {
               break; // computer won
           } else if (move.isDraw) {
               break; // draw
           }
        }

You can test run a sample implementation accessible at
http://www.cs.utep.edu/cheon/cs3360/project/omok/.

HINTS 

  It is strongly recommended to use the PHP Development Tools (PDT),
  an Eclipse plugin for PHP (or PhpStorm for IntellJ IDEA).

  Create in your src directory/folder three subdirectories/folders
  corresponding to the three URLs. Each subdirectory should have a PHP
  file named index.php, the entry point of the provided API, e.g.,

  info/index.php
  new/index.php
  play/index.php

  If this is your first PHP project, start early. You need a bit of
  time to get familiar with PHP scripting and to configure and get
  used to its support tools and development environment.
 
TESTING

   You code should be deployed and run correctly on the class web
   account on cssrvlab01.utep.edu.

WHAT AND HOW TO TURN IN
   
   Submit your code along with any supporting documents through the
   Assignment Submission page found in the Homework section of the
   course website. The page will ask you to zip your code and support
   files and upload a single archive file. The zip archive file should
   include only a single directory named YourFirstNameLastName which
   contains all your source code files and other support files needed
   to run your scripts. You should submit your work before the class
   on the due date. If you work in pair, make just one submission by
   listing both names in your submission.

   You should also deploy your code to the class web account on
   cssrvlab01.utep.edu. Make sure your code run correctly on this
   particular web server (PHP version 7.4), as we will test your
   deployed code, not the submitted one.

   If you work in pair, make only one submission through the
   Assignment Submission page by specifying both names during the
   submission; make sure to include the contribution form in your
   submission. However, each member needs to deploy the code to
   his/her own class web account on cssrvlab01. We will run our test
   scripts such as torture.php (see the course website) by specifying
   a URL http://cssrvlab01.utep.edu/classes/cs3360/<your-user-name>/.

GRADING

   You will be graded in part on the quality of the design and on how
   clear your code is. Excessively long code will be penalized: don't
   repeat code in multiple places. Your code should be reasonably
   documented and sensibly indented so it is easy to read and
   understand.

   Be sure your name is in the comments in your code.

REFERENCES

  [1] Rasmus Lerdorf and Kevin Tatroe, Programming PHP, 3rd edition,
      O'Reilly, 2013. Ebook through UTEP library.
  [2] Junade Ali, Mastering PHP Design Patterns, Packt Publishing,
      2016. Ebook.
  [3] Ben Smith, Beginning JSON, Apress, 2015. Ebook.
